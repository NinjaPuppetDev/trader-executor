package v2

import (
	"context"
	"fmt"
	"strconv"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/wasm/host"
	"github.com/smartcontractkit/chainlink/v2/core/services/workflows/metering"
)

var _ host.CapabilityExecutor = (*CapabilityExecutor)(nil)

type CapabilityExecutor struct {
	*Engine
	ID string
}

// CallCapability handles requests generated by the wasm guest
func (c *CapabilityExecutor) CallCapability(ctx context.Context, request *sdkpb.CapabilityRequest) (*sdkpb.CapabilityResponse, error) {
	select {
	case c.capCallsSemaphore <- struct{}{}: // block if too many concurrent capability calls
	case <-ctx.Done():
		return nil, ctx.Err()
	}
	defer func() { <-c.capCallsSemaphore }()

	// TODO (CAPPL-735): use request.Metadata.WorkflowExecutionId to associate the call with a specific execution
	capability, err := c.cfg.CapRegistry.GetExecutable(ctx, request.Id)
	if err != nil {
		return nil, fmt.Errorf("trigger capability not found: %w", err)
	}
	capInfo, err := capability.Info(ctx)
	if err != nil {
		c.cfg.Lggr.Error("could not get capability info for %v", request.Id)
	}

	capReq := capabilities.CapabilityRequest{
		Payload:      request.Payload,
		Method:       request.Method,
		CapabilityId: request.Id,
		Metadata: capabilities.RequestMetadata{
			WorkflowExecutionID: c.ID,
		},
	}

	meterReport, ok := c.meterReports.Get(c.ID)
	if !ok {
		c.cfg.Lggr.Error("no metering report found for %v", c.ID)
	}
	// TODO: After (CAPPL-881) replace with call ID
	count := meterReport.IncrementRefCount(metering.ReportStepRef(capReq.CapabilityId))
	callID := capReq.CapabilityId + strconv.FormatUint(count, 10)
	ref := metering.ReportStepRef(callID)
	err = meterReport.ReserveStep(ref, capInfo)
	if err != nil {
		c.cfg.Lggr.Error("could not reserve for %s: %w", callID, err)
	}

	// TODO(CAPPL-737): run with a timeout
	capResp, err := capability.Execute(ctx, capReq)
	if err != nil {
		return nil, fmt.Errorf("failed to execute capability: %w", err)
	}

	err = meterReport.SetStep(ref, capResp.Metadata.Metering)
	if err != nil {
		c.cfg.Lggr.Error(fmt.Sprintf("failed to set metering report step for ref %s: %s", ref, err))
	}

	return &sdkpb.CapabilityResponse{
		Response: &sdkpb.CapabilityResponse_Payload{
			Payload: capResp.Payload,
		},
	}, nil
}
